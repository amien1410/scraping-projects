# -*- coding: utf-8 -*-
"""elene-solarreviews.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aaik7xe2G9ahVpgHtiiGaJenKS3AUfFr
"""

# install missing module
!pip install lxml

# load libraries
import requests
import json
from bs4 import BeautifulSoup
from google.colab import files

# request data from url
response = requests.get('https://www.solarreviews.com/sitemap.xml')

# modify data response with bs4
soup = BeautifulSoup(response.text, 'xml')

# get all links
links = soup.find_all('loc')

# filter specific links
links = [l.get_text() for l in links]
links = [l for l in links if (l and '/installers/' in l) and ('#' not in l)]

result = {}
for x in range(len(links)):
  # request data from url
  res = requests.get(links[x])
  print('No: ' + str(x+1) + ' - Url: ' + links[x])

  # modify data response with bs4
  data = BeautifulSoup(res.text)

  error = data.select('h1.md:text-d3')
  if error:
        continue

  # get all information
  company_name = data.find('h1').get_text()
  company_logo = data.find('img', class_="p-3").get('src')
  expert_rating = data.select('.flex.solarreviews-ranking')[0].get('data-ranking')
  expert_rating_class = data.select('.flex.solarreviews-ranking')[0].find('p').get_text()
  customer_rating = data.select('h2.pb-0')
  if len(customer_rating) > 0:
    customer_rating = customer_rating[0].get_text()
  else:
    customer_rating = 'No customer rating'
  total_reviews = data.select('a[href=#reviews]')[0].get_text().replace('Reviews', '')
  establishment = data.find(lambda tag: len(tag.find_all()) == 0 and "Installing" in tag.text)
  if establishment is not None:
    establishment = establishment.get_text()
  else:
    establishment = "No data"
  is_verified = data.find('span', class_='ml-2').get_text()
  if(is_verified != 'Verified profile'):
    is_verified = 'Unverified'

  # get all brands
  brands = data.find_all('a')
  brands = [l.get('href') for l in brands]
  brands = ['https://www.solarreviews.com' + l for l in brands if (l and '/manufacturers/' in l)]
  brands = ', '.join(brands)

  # get all b_logos
  b_logos = data.find_all('img', class_='object-contain object-center border rounded w-full flex h-full')
  b_logos = [l.get('src') for l in b_logos]
  b_logos = ', '.join(b_logos)

  services = data.find(id='service-types')
  if services  is not None:
    services = services.find_next_siblings('p')
    services = [l.get_text() for l in services]
    services = ', '.join(services)
  else:
    services = "There is no service types"
  services

  office_location = data.select('div.grid.gap-4.grid-cols-1.sm:grid-cols-3')
  if len(office_location) > 0:
    office_location = office_location[0].text.strip().replace('\n\n', ', ')
  else:
    office_location = 'No data'

  certification = data.select('.grid-cols-4 img')
  if len(certification) > 0:
    certification = [l.get('alt') for l in certification]
    certification = ', '.join(certification)
  else:
    certification = "There is no certification"
  certification

  nabcep_certification = data.select('.md\:grid-cols-2.gap-3 .flex div')
  if len(nabcep_certification) > 0:
    nabcep_certification = [l.text for l in nabcep_certification]
    nabcep_certification = ', '.join(nabcep_certification).replace('\n                    ', ' ')
  else:
    nabcep_certification = "There is no NABCEP certification"
  nabcep_certification

  head_office = data.select('img[alt="Location pin"]')
  if len(head_office) > 0:
    head_office = head_office[0].parent.find_next_sibling('div').text.replace('Head Office', '')
  else:
    head_office = 'No data'
  
  phone = data.select('img[alt="Phone mobile"]')
  if len(phone) > 0:
    phone = phone[0].parent.find_next_sibling('div').find('a').get('data-phone')
  else:
    phone = 'No phone number'
  website = data.select('img[alt="Website"]')
  if len(website) > 0:
    website = website[0].parent.find_next_sibling('div').find('a').get('href')
  else:
    website = 'No website'

  # append to result dict
  result[x] = {
      "url": links[x],
      "company_name": company_name,
      "is_verified": is_verified,
      "company_logo": company_logo,
      "expert_rating": expert_rating,
      "expert_rating_class": expert_rating_class,
      "customer_rating": customer_rating,
      "total_reviews": total_reviews,
      "establishment": establishment,
      "brands": brands,
      "b_logos": b_logos,
      "services": services,
      "office_location": office_location,
      "certification": certification,
      "nabcep_certification": nabcep_certification,
      "head_office": head_office,
      "phone": phone,
      "website": website,
  }

with open("solarreviews.json", "w") as outfile:
    json.dump(result, outfile)
files.download('solarreviews.json')

with open("solarreviews.json", "w") as outfile:
    json.dump(result, outfile)
files.download('solarreviews.json')

# request data from url
res = requests.get('https://www.solarreviews.com/installers/sunvena-solar-llc-reviews')
# res = requests.get('https://www.solarreviews.com/installers/solarugreen-reviews')

# modify data response with bs4
data = BeautifulSoup(res.text)
error = data.select('h1.md:text-d3')
error

data.select('.flex.solarreviews-ranking')[0].find('p').get_text()

services = data.find(id='service-types')
if services  is not None:
  services = services.find_next_siblings('p')
  services = [l.get_text() for l in services]
  services = ', '.join(services)
else:
  services = "There is no service types"
services

office_location = data.select('div.grid.gap-4.grid-cols-1.sm:grid-cols-3')
office_location[0].text.strip().replace('\n\n', ', ')

certification = data.select('.grid-cols-4 img')
if len(certification) > 0:
  certification = [l.get('alt') for l in certification]
  certification = ', '.join(certification)
else:
  certification = "There is no certification"
certification

nabcep_certification = data.select('.md\:grid-cols-2.gap-3 .flex div')
if len(nabcep_certification) > 0:
  nabcep_certification = [l.text for l in nabcep_certification]
  nabcep_certification = ', '.join(nabcep_certification).replace('\n                    ', ' ')
else:
  nabcep_certification = "There is no NABCEP certification"
nabcep_certification

head_office = data.select('img[alt="Location pin"]')[0].parent.find_next_sibling('div').text.replace('Head Office', '')
phone = data.select('img[alt="Phone mobile"]')[0].parent.find_next_sibling('div').find('a').get('data-phone')
website = data.select('img[alt="Website"]')[0].parent.find_next_sibling('div').find('a').get('href')

# request data from url
res = requests.get('https://www.solarreviews.com/installers/sky-power-systems-reviews')

# modify data response with bs4
data = BeautifulSoup(res.text)

# get all information
company_name = data.find('h1').get_text()
company_logo = data.find('img', class_="p-3").get('src')
expert_rating = data.select('h2.pb-0')[0].get_text()
establishment = data.find(lambda tag: len(tag.find_all()) == 0 and "Installing" in tag.text).get_text()
is_verified = data.find('span', class_='ml-2').get_text()
if(is_verified != 'Verified profile'):
  is_verified = 'Unverified'

# get all brands
brands = data.find_all('a')
brands = [l.get('href') for l in brands]
brands = ['https://www.solarreviews.com' + l for l in brands if (l and '/manufacturers/' in l)]
brands = ', '.join(brands)

# get all b_logos
b_logos = data.find_all('img', class_='object-contain object-center border rounded w-full flex h-full')
b_logos = [l.get('src') for l in b_logos]
b_logos = ', '.join(b_logos)

services = data.find(id='service-types')
if services  is not None:
  services = services.find_next_siblings('p')
  services = [l.get_text() for l in services]
  services = ', '.join(services)
else:
  services = "There is no service types"
services

office_location = data.select('div.grid.gap-4.grid-cols-1.sm:grid-cols-3')
office_location = office_location[0].text.strip().replace('\n\n', ', ')

certification = data.select('.grid-cols-4 img')
if len(certification) > 0:
  certification = [l.get('alt') for l in certification]
  certification = ', '.join(certification)
else:
  certification = "There is no certification"
certification

nabcep_certification = data.select('.md\:grid-cols-2.gap-3 .flex div')
if len(nabcep_certification) > 0:
  nabcep_certification = [l.text for l in nabcep_certification]
  nabcep_certification = ', '.join(nabcep_certification).replace('\n                    ', ' ')
else:
  nabcep_certification = "There is no NABCEP certification"
nabcep_certification

head_office = data.select('img[alt="Location pin"]')[0].parent.find_next_sibling('div').text.replace('Head Office', '')
phone = data.select('img[alt="Phone mobile"]')[0].parent.find_next_sibling('div').find('a').get('data-phone')
website = data.select('img[alt="Website"]')[0].parent.find_next_sibling('div').find('a').get('href')

# append to result dict
result = {
    "company_name": company_name,
    "is_verified": is_verified,
    "company_logo": company_logo,
    "expert_rating": expert_rating,
    "establishment": establishment,
    "brands": brands,
    "b_logos": b_logos,
    "services": services,
    "office_location": office_location,
    "certification": certification,
    "nabcep_certification": nabcep_certification,
    "head_office": head_office,
    "phone": phone,
    "website": website,
}

result